// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/29/2024 10:11:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg btn_add;
reg btn_sub;
reg chave0;
reg chave1;
reg clock_in;
// wires                                               
wire a;
wire b;
wire c;
wire d;
wire d1;
wire d2;
wire d3;
wire d4;
wire e;
wire f;
wire g;
wire l0;
wire l1;
wire l2;
wire l3;
wire l4;
wire l5;
wire l6;
wire l7;
wire l8;
wire l9;
wire [1:0] led_rgb;
wire p;

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.btn_add(btn_add),
	.btn_sub(btn_sub),
	.c(c),
	.chave0(chave0),
	.chave1(chave1),
	.clock_in(clock_in),
	.d(d),
	.d1(d1),
	.d2(d2),
	.d3(d3),
	.d4(d4),
	.e(e),
	.f(f),
	.g(g),
	.l0(l0),
	.l1(l1),
	.l2(l2),
	.l3(l3),
	.l4(l4),
	.l5(l5),
	.l6(l6),
	.l7(l7),
	.l8(l8),
	.l9(l9),
	.led_rgb(led_rgb),
	.p(p)
);
initial 
begin 
#1000000 $finish;
end 

// chave0
initial
begin
	chave0 = 1'b1;
end 

// chave1
initial
begin
	chave1 = 1'b1;
end 

// clock_in
always
begin
	clock_in = 1'b0;
	clock_in = #2500 1'b1;
	#2500;
end 
endmodule

